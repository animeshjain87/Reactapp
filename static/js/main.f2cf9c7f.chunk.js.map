{"version":3,"sources":["components/Login.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Login","props","state","username","password","loggedIn","onChange","bind","submitForm","event","this","setState","target","name","value","preventDefault","to","className","label","onSubmit","type","passwordlabel","href","style","float","fontSize","forgottext","id","btnname","Component","Dashboard","src","process","Plist","topadvertisment","map","advertisment","imgUrl","Tabs","defaultActiveKey","Tab","eventKey","title","Experiences","product","productName","price","LifeStyle","MobileAccessories","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f2cf9c7f.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\n\r\nclass Login extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    let loggedIn = false\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      loggedIn\r\n    }\r\n    this.onChange = this.onChange.bind(this)\r\n    this.submitForm = this.submitForm.bind(this)\r\n  }\r\n\r\n  onChange(event){\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    })\r\n  }\r\n\r\n  submitForm(event){\r\n    event.preventDefault()\r\n    const {username, password} = this.state\r\n    if(username === 'Admin' && password === 'admin123') {\r\n      this.setState({\r\n        loggedIn: true\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    if(this.state.loggedIn) {\r\n      return <Redirect to='/dashboard' />\r\n    }\r\n      return (\r\n          <div className=\"global-container\">\r\n          <div className=\"card login-form\">\r\n            <div className=\"card-body\">\r\n              <h3 className=\"card-title text-center\">Log in to {this.props.label}</h3>\r\n              <div className=\"card-text\"> \r\n\r\n                <form onSubmit={this.submitForm}>                \r\n                  <div className=\"form-group\">\r\n                    <label>{this.props.username}</label>\r\n\r\n                    <input type=\"text\" \r\n                    name=\"username\" \r\n                    value={this.state.username}\r\n                    onChange={this.onChange}\r\n                    className=\"form-control form-control-sm\" />\r\n\r\n                  </div>\r\n                  <div className=\"form-group\">\r\n                  <label>{this.props.passwordlabel}</label>\r\n                  <a href=\"\" style={{float: 'right', fontSize: '12px'}}>{this.props.forgottext}</a>\r\n                    \r\n                    <input type=\"password\" \r\n                    name=\"password\" \r\n                    value={this.state.password} \r\n                    onChange={this.onChange}\r\n                    className=\"form-control form-control-sm\" id=\"\" />\r\n\r\n                  </div>\r\n                  <button type=\"submit\" className=\"btn btn-primary btn-block\">{this.props.btnname}</button>\r\n                  <div className=\"sign-up\">\r\n                    Don't have an account? <a href=\"\">Create One</a>                  \r\n                  </div>\r\n                </form>\r\n\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      \r\n      )\r\n  }\r\n}\r\nexport default Login;\r\n","import React from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport Tabs from \"react-bootstrap/Tabs\";\r\nimport Tab from \"react-bootstrap/Tab\";\r\nimport Plist from \"./Plist\";\r\nimport bootstrap from \"../../node_modules/bootstrap/dist/css/bootstrap.min.css\"\r\n\r\n\r\nfunction Dashboard(props) {\r\n  return (\r\n    <div>\r\n\r\n      <div className=\"entry-board J_entryBoard\">\r\n        <div className=\"container\">\r\n          <ul className=\"external-entries\">\r\n            <li className=\"entry\">              \r\n                <Link>\r\n                  Welcome, Admin\r\n              </Link>\r\n            </li> \r\n        \r\n            <li className=\"entry\">              \r\n                <NavLink to=\"/\">\r\n                  Logout\r\n              </NavLink>\r\n            </li>            \r\n          </ul>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"homebanner mb-5\">\r\n         <img src={process.env.PUBLIC_URL + '/home_banner.jpg'} /> \r\n      </div>\r\n\r\n      <div className=\"home-promo\">\r\n        <ul className=\"home-promo-list full-img\">\r\n          {Plist.topadvertisment.map((advertisment) => {\r\n              return (\r\n                <li>\r\n                  <Link to=\"\">\r\n                    <img src={advertisment.imgUrl} />\r\n                  </Link>                          \r\n                </li>\r\n              );\r\n            })}\r\n        </ul>\r\n      </div>\r\n\r\n      <div className=\"home-sec home-hot\">\r\n        <div className=\"sec-hd\">\r\n          <span className=\"sec-fontline\" />\r\n          <h2 className=\"sec-title\">accessories</h2>\r\n          <span className=\"sec-fontline\" />\r\n        </div>\r\n\r\n        <div className=\"sec-bd\">\r\n          <div className=\"hot-more\">\r\n            <Tabs\r\n              className=\"tab-list\"\r\n              defaultActiveKey=\"home\"\r\n              id=\"uncontrolled-tab-example\"\r\n            >\r\n              <Tab className=\"tab-link\" eventKey=\"home\" title=\"Music Store\">\r\n                <div className=\"list-right\">\r\n                  <ul>\r\n                    {Plist.Experiences.map((product) => {\r\n                      return (\r\n                        <li>\r\n                          <a href=\"#\" className=\"thumb\">\r\n                            <img src={product.imgUrl} />\r\n                          </a>\r\n                          <h3 className=\"title\">\r\n                            <a href=\"#\">{product.productName}</a>\r\n                          </h3>\r\n                          <p className=\"price\">{product.price}</p>\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                </div>\r\n              </Tab>\r\n              <Tab className=\"tab-link\" eventKey=\"profile\" title=\"Lifestyle\">\r\n                <div className=\"list-right\">\r\n                  <ul>\r\n                    {Plist.LifeStyle.map((product) => {\r\n                      return (\r\n                        <li>\r\n                          <a href=\"\" className=\"thumb\">\r\n                            <img src={product.imgUrl} />\r\n                          </a>\r\n                          <h3 className=\"title\">\r\n                            <a href=\"\">{product.productName}</a>\r\n                          </h3>\r\n                          <p className=\"price\">{product.price}</p>\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                </div>\r\n              </Tab>\r\n              <Tab\r\n                className=\"tab-link\"\r\n                eventKey=\"contact\"\r\n                title=\"Mobile Accessories\"\r\n              >\r\n                <div className=\"list-right\">\r\n                  <ul>\r\n                    {Plist.MobileAccessories.map((product) => {\r\n                      return (\r\n                        <li>\r\n                          <a href=\"\" className=\"thumb\">\r\n                            <img src={product.imgUrl} />\r\n                          </a>\r\n                          <h3 className=\"title\">\r\n                            <a href=\"\">{product.productName}</a>\r\n                          </h3>\r\n                          <p className=\"price\">{product.price}</p>\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                </div>\r\n              </Tab>\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main div close below */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\nimport './App.css';\nimport Login from './components/Login';\nimport Dashboard from './components/Dashboard';\n//import DataList from './components/DataList';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nfunction App() {\n  return (\n   <Router>\n    <div className=\"App\">   \n\n    <Route exact path=\"/\" component={Login}>   \n      <Login label=\"My App\" username=\"Username\" passwordlabel=\"Password\" forgottext=\"Forgot password?\" btnname=\"Sign in\" />     \n    </Route>\n\n      <Route path=\"/dashboard\" component={Dashboard}>\n        <Dashboard/> \n      </Route>     \n      \n    </div>\n   </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}